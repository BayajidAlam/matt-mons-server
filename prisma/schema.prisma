generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  role     UserRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  superAdmin   SuperAdmin?
  admin        Admin?
  seller       Seller?
  customer     Customer?
  sellsManager SellsManager?

  sentMessages     Conversation[] @relation(name: "Sender")
  receivedMessages Conversation[] @relation(name: "Receiver")

  Order Order[]

  @@map("users")
}

model SuperAdmin {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String  @unique
  emergencyContactNumber String
  address                String?
  profileImg             String?
  nidNumber              String
  userId                 String  @unique
  isActive               Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("superAdmins")
}

model Admin {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String  @unique
  emergencyContactNumber String
  address                String?
  profileImg             String?
  userId                 String  @unique
  nidNumber              String
  isActive               Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Seller {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String  @unique
  emergencyContactNumber String
  address                String
  profileImg             String
  userId                 String  @unique
  nidNumber              String
  isActive               Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Shop      Shop[]

  @@map("sellers")
}

model SellsManager {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String  @unique
  emergencyContactNumber String
  address                String?
  profileImg             String?
  userId                 String  @unique
  nidNumber              String
  isActive               Boolean @default(true)

  user   User    @relation(fields: [userId], references: [id])
  Shop   Shop?   @relation(fields: [shopId], references: [id])
  shopId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sellsManagers")
}

model Customer {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String? @unique
  emergencyContactNumber String?
  address                String?
  profileImg             String?
  userId                 String  @unique
  isActive               Boolean @default(true)
  dob                    String?
  user                   User    @relation(fields: [userId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ReviewAndRatings ReviewAndRatings[]

  @@map("customers")
}

model Conversation {
  id           String @id @default(uuid())
  message      String
  participants String
  senderId     String
  sender       User   @relation(name: "Sender", fields: [senderId], references: [id])
  receiverId   String
  receiver     User   @relation(name: "Receiver", fields: [receiverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  message        String
  senderId       String
  receiverId     String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Shop {
  id           String         @id @default(uuid())
  sellerId     String
  sellsMangers SellsManager[]
  shopName     String         @unique
  shopImage    String
  rating       String         @default("0")
  location     String
  isVerified   Boolean        @default(false)
  products     Product[]
  seller       Seller         @relation(fields: [sellerId], references: [id])
  cupon        Coupon[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("shop")
}

model Coupon {
  id             String   @id @default(uuid())
  shopId         String
  couponName     String   @unique
  discount       String
  shippingCharge String
  validTill      DateTime
  createdBy      String

  Shop Shop @relation(fields: [shopId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupon")
}

model Product {
  id     String @id @default(uuid())
  shopId String

  Shop Shop @relation(fields: [shopId], references: [id])

  productName             String
  productMainImage        String
  productAdditionalImages String[]
  productDetails          String
  productAdditionalInfo   Json
  minPrice                String
  discountPrice           String
  discountPercentage      String
  moneySaved              String

  createdBy    String
  categoryId   String
  Category     Category @relation(fields: [categoryId], references: [id])
  productSkuId String

  productTags      String[]
  ReviewAndRatings ReviewAndRatings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId      String?
  orderOrderId String?
  Order        Order?     @relation(fields: [orderId], references: [id])
  Cart         Cart?      @relation(fields: [cartId], references: [id])
  cartId       String?
  ProductSku   ProductSku @relation(fields: [productSkuId], references: [id])

  @@map("product")
}

model Category {
  id      String    @id @default(uuid())
  title   String    @unique
  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model ProductSku {
  id       String @id @default(uuid())
  title    String @unique
  quantity String @default("0")

  availableColor String[]
  availableSize  String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  @@map("sku")
}

model Color {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("colors")
}

model Size {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sizes")
}

model ProductTags {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Order {
  id                     String      @id @default(uuid())
  userId                 String
  shopId                 String
  user                   User        @relation(fields: [userId], references: [id])
  contactNumber          String?
  emergencyContactNumber String?
  email                  String
  address                String?
  products               Product[]
  subTotal               String
  shippingCharge         String
  tax                    String
  total                  String
  orderStatus            OrderStatus @default(received)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Cart {
  id        String    @id @default(uuid())
  userId    String
  productId String[]
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model WishList {
  id        String @id @default(uuid())
  userId    String
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wishlists")
}

model ReviewAndRatings {
  id         String   @id @default(uuid())
  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  Product   Product @relation(fields: [productId], references: [id])
  productId String
  comment   String
  rating    String
  like      String
  disLike   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviewAndRatings")
}

// enum
enum UserRole {
  super_admin
  admin
  seller
  sells_manager
  customer
}

enum OrderStatus {
  received
  on_warhouse
  on_curier
  shipped
  handovered
  canceled
}
