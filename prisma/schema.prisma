generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  phone    String   @unique
  password String
  role     UserRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  superAdmin   SuperAdmin?
  admin        Admin?
  seller       Seller?
  sellsManager SellsManager?

  sentMessages     Conversation[] @relation(name: "Sender")
  receivedMessages Conversation[] @relation(name: "Receiver")

  @@map("users")
}

model SuperAdmin {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String  @unique
  emergencyContactNumber String
  email                  String  @unique
  address                String?
  profileImg             String?
  nidNumber              String
  userId                 String  @unique
  isActive               Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("superAdmins")
}

model Admin {
  id                     String  @id @default(uuid())
  fullName               String
  contactNumber          String  @unique
  emergencyContactNumber String
  address                String?
  profileImg             String?
  userId                 String  @unique
  email                  String  @unique
  nidNumber              String
  isActive               Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Seller {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model SellsManager {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Product {
  id String @id @default(uuid())
}

model Conversation {
  id           String @id @default(uuid())
  message      String
  participants String
  senderId     String
  sender       User   @relation(name: "Sender", fields: [senderId], references: [id])
  receiverId   String
  receiver     User   @relation(name: "Receiver", fields: [receiverId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  message        String
  senderId       String
  receiverId     String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

// enum
enum UserRole {
  super_admin
  admin
  seller
  sells_manager
}

enum TripStatus {
  Pending
  Running
  Completed
}

enum Workshop {
  InHouse
  External
}

enum MaintenanceType {
  Scheduled
  Unscheduled
  Accidental
  Others
}

enum AccidentPaymentStatus {
  Paid
  Received
  Nothing
}

enum PaperType {
  Registration
  Tax
  Fitness
  Route
}
